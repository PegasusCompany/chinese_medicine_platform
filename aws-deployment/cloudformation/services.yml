AWSTemplateFormatVersion: '2010-09-09'
Description: 'Chinese Medicine Platform - ECS Services'

Parameters:
  ProjectName:
    Type: String
    Default: chinese-medicine-platform
    Description: Name of the project
  
  Environment:
    Type: String
    Default: production
    Description: Environment name
  
  BackendImageURI:
    Type: String
    Description: Backend Docker image URI
  
  FrontendImageURI:
    Type: String
    Description: Frontend Docker image URI
  
  DatabaseURL:
    Type: String
    Description: Database connection URL
    NoEcho: true
  
  JWTSecret:
    Type: String
    Description: JWT Secret key
    NoEcho: true
    Default: your-super-secret-jwt-key-for-hackathon-2024

Resources:
  # ECS Task Execution Role
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-ecs-execution-role

  # ECS Task Role
  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-ecs-task-role

  # CloudWatch Log Groups
  BackendLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${ProjectName}-backend
      RetentionInDays: 7

  FrontendLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${ProjectName}-frontend
      RetentionInDays: 7

  # Backend Task Definition
  BackendTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${ProjectName}-backend
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 512
      Memory: 1024
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      TaskRoleArn: !Ref ECSTaskRole
      ContainerDefinitions:
        - Name: backend
          Image: !Ref BackendImageURI
          Essential: true
          PortMappings:
            - ContainerPort: 5000
              Protocol: tcp
          Environment:
            - Name: NODE_ENV
              Value: production
            - Name: PORT
              Value: '5000'
            - Name: DATABASE_URL
              Value: !Ref DatabaseURL
            - Name: JWT_SECRET
              Value: !Ref JWTSecret
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref BackendLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          HealthCheck:
            Command:
              - CMD-SHELL
              - curl -f http://localhost:5000/health || exit 1
            Interval: 30
            Timeout: 5
            Retries: 3
            StartPeriod: 60

  # Frontend Task Definition
  FrontendTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${ProjectName}-frontend
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 256
      Memory: 512
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      TaskRoleArn: !Ref ECSTaskRole
      ContainerDefinitions:
        - Name: frontend
          Image: !Ref FrontendImageURI
          Essential: true
          PortMappings:
            - ContainerPort: 80
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref FrontendLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          HealthCheck:
            Command:
              - CMD-SHELL
              - curl -f http://localhost:80 || exit 1
            Interval: 30
            Timeout: 5
            Retries: 3
            StartPeriod: 30

  # Target Groups
  BackendTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${ProjectName}-backend-tg
      Port: 5000
      Protocol: HTTP
      VpcId:
        Fn::ImportValue: !Sub ${ProjectName}-VPC-ID
      TargetType: ip
      HealthCheckPath: /health
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-backend-tg

  FrontendTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${ProjectName}-frontend-tg
      Port: 80
      Protocol: HTTP
      VpcId:
        Fn::ImportValue: !Sub ${ProjectName}-VPC-ID
      TargetType: ip
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-frontend-tg

  # Load Balancer Listeners
  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref FrontendTargetGroup
      LoadBalancerArn:
        Fn::ImportValue: !Sub ${ProjectName}-ALB-ARN
      Port: 80
      Protocol: HTTP

  # Listener Rules
  BackendListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref BackendTargetGroup
      Conditions:
        - Field: path-pattern
          Values:
            - /api/*
      ListenerArn: !Ref LoadBalancerListener
      Priority: 100

  # ECS Services
  BackendService:
    Type: AWS::ECS::Service
    DependsOn: BackendListenerRule
    Properties:
      ServiceName: !Sub ${ProjectName}-backend
      Cluster:
        Fn::ImportValue: !Sub ${ProjectName}-ECS-Cluster-ARN
      TaskDefinition: !Ref BackendTaskDefinition
      LaunchType: FARGATE
      DesiredCount: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - Fn::ImportValue: !Sub ${ProjectName}-ECS-SG-ID
          Subnets:
            - Fn::ImportValue: !Sub ${ProjectName}-PublicSubnet1-ID
            - Fn::ImportValue: !Sub ${ProjectName}-PublicSubnet2-ID
          AssignPublicIp: ENABLED
      LoadBalancers:
        - ContainerName: backend
          ContainerPort: 5000
          TargetGroupArn: !Ref BackendTargetGroup
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-backend-service

  FrontendService:
    Type: AWS::ECS::Service
    DependsOn: LoadBalancerListener
    Properties:
      ServiceName: !Sub ${ProjectName}-frontend
      Cluster:
        Fn::ImportValue: !Sub ${ProjectName}-ECS-Cluster-ARN
      TaskDefinition: !Ref FrontendTaskDefinition
      LaunchType: FARGATE
      DesiredCount: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - Fn::ImportValue: !Sub ${ProjectName}-ECS-SG-ID
          Subnets:
            - Fn::ImportValue: !Sub ${ProjectName}-PublicSubnet1-ID
            - Fn::ImportValue: !Sub ${ProjectName}-PublicSubnet2-ID
          AssignPublicIp: ENABLED
      LoadBalancers:
        - ContainerName: frontend
          ContainerPort: 80
          TargetGroupArn: !Ref FrontendTargetGroup
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-frontend-service

Outputs:
  BackendServiceArn:
    Description: Backend ECS Service ARN
    Value: !Ref BackendService

  FrontendServiceArn:
    Description: Frontend ECS Service ARN
    Value: !Ref FrontendService

  ApplicationURL:
    Description: Application URL
    Value: !Sub
      - http://${LoadBalancerDNS}
      - LoadBalancerDNS:
          Fn::ImportValue: !Sub ${ProjectName}-ALB-DNS